Sol1: Brute Force
Time Complexity O(n^2) Space Complexity O(n)

class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        newlist = [-1 for _ in range(len(nums))]
        visited = set()
        
        for idx, i in enumerate(nums):
            for j in nums[idx+1:]:
                if j > i:
                    newlist[idx] = j
                    visited.add(idx)
                    break
            if idx not in visited:
                for j in nums[:idx]:
                    if j > i:
                        newlist[idx] = j
                        visited.add(idx)
                        break
        return newlist


Sol2 Stack
Time O(2n) Space O(n)

class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res = []
        newlist = [] #containing values of nums
        
        nums.reverse()
        
        for idx,i in enumerate(nums):
            while newlist != [] and newlist[len(newlist)-1] <= i:
                newlist.pop()
            if newlist == []:
                res.append(-1)
            else: 
                res.append(newlist[len(newlist)-1])
            newlist.append(i)
        #return res
        
        for idx,i in enumerate(nums):
            while newlist != [] and newlist[len(newlist)-1] <= i:
                newlist.pop()
            if newlist == []:
                res[idx] = -1
            else: 
                res[idx] = newlist[len(newlist)-1]
            newlist.append(i)
            
        res.reverse()
        
        return res


        
                
                    
            
                    
                
                
                
            

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        res = ''
        for i in range(len(s)):
            res = max(self.helper(s,i,i), self.helper(s,i,i+1), res, key = len)
            
        return res
    
    def helper(self,s,l,r):
        while l>=0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1:r]
    
DP Solution time O(n^2), space O(n^2)
___
 if s is '': return s
        
        res = ''
        n = len(s)
        
        dp = [[None for _ in range(len(s))] for _ in range(len(s))]
        for j in range(n):
            for i in range(j+1):
                if i == j: dp[i][j] = True
                elif j == i + 1:
                    dp[i][j] = (s[i] == s[j])
                else: dp[i][j] = (dp[i+1][j-1] and s[i] == s[j])
                if dp[i][j] and j-i+1 > len(res):
                    res = s[i:j+1]
        return res
                    

Approach #2 Using Cummulative sum [Accepted]

class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        sumlist = [0 for _ in range(len(nums)+1)]
        sumlist[0] = 0
        cnt = 0
        if not nums: return 0
        
        for i in range(1,len(nums)+1):
            sumlist[i] = sumlist[i-1] + nums[i-1]
            
        for i in range(len(nums)):
            for j in range(i+1,len(nums)+1):
                if sumlist[j] - sumlist[i] == k:
                    cnt += 1
                    
        return cnt

Approach #4 Using hashmap [Accepted]


        preSum, ret, size = [0], 0, len(nums)
        
        cnt = collections.Counter(preSum)
        if size == 1:
            return 1 if nums[0] == k else 0
        for val in nums:
            s = preSum[-1] + val
            preSum.append(s)
            ret += cnt.get(s-k, 0)
            cnt[s] = cnt.get(s,0) + 1
            
        return ret

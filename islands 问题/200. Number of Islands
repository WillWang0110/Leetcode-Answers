#SOLUTION 1
#DFS

class Solution(object):
            
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        def expand (grid, i, j):

            col = len(grid[0])
            row = len(grid)

            if i > row-1 or j > col-1 or i < 0 or j < 0:
                return
            else:
                if grid[i][j] == '0':return
                else:
                    grid[i][j] = '0'
                    expand(grid,i-1,j)
                    expand(grid,i+1,j)
                    expand(grid,i,j-1)
                    expand(grid,i,j+1)
        
        if not grid:return 0
                
        cnt = 0
        col = len(grid[0])
        row = len(grid)
        
        for m in range(row):
            for n in range(col):
                if grid[m][n] == '1':
                    cnt += 1
                    expand(grid,m,n)
                    
        return cnt
      
#SOLUTION 2
#BFS

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid: return 0
        
        col = len(grid[0])
        row = len(grid)
        directions = ([-1,0],[1,0],[0,-1],[0,1])
        cnt, que = 0, collections.deque()
        
        for i in range(row):
            for j in range(col):
                if grid[i][j] == '1':
                    cnt += 1
                    que.append((i,j))
                    grid[i][j] = '0'
                    while que:
                        x,y = que.pop()
                        for dic in directions:
                            nx, ny = x + dic[0], y + dic[1]
                            if 0 <= nx < row and 0 <= ny < col and grid[nx][ny] == '1':
                                grid[nx][ny] = '0'
                                que.append((nx,ny))
        return cnt
                            
                       
#SOLUTION 3
#Union Find


    
